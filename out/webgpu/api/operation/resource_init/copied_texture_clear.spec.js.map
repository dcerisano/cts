{"version":3,"sources":["../../../../../src/webgpu/api/operation/resource_init/copied_texture_clear.spec.ts"],"names":["description","makeTestGroup","assert","unreachable","ReadMethod","TextureZeroInitTest","CopiedTextureClearTest","checkContentsByBufferCopy","texture","state","subresourceRange","level","mipLevel","slice","each","params","dimension","expectSingleColor","format","size","textureWidth","textureHeight","layout","exp","stateToTexelComponents","checkContentsByTextureCopy","width","height","dst","device","createTexture","usage","GPUTextureUsage","COPY_DST","COPY_SRC","commandEncoder","createCommandEncoder","copyTextureToTexture","arrayLayer","depth","queue","submit","finish","checkContents","readMethod","CopyToBuffer","CopyToTexture","g","test","generateParams","fn","t","run"],"mappings":"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","sourcesContent":["export const description = 'Test uninitialized textures are initialized to zero when copied.';\n\nimport { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, unreachable } from '../../../../common/framework/util/util.js';\nimport { SubresourceRange } from '../../../util/texture/subresource.js';\n\nimport { InitializedState, ReadMethod, TextureZeroInitTest } from './texture_zero_init_test.js';\n\nclass CopiedTextureClearTest extends TextureZeroInitTest {\n  private checkContentsByBufferCopy(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    for (const { level: mipLevel, slice } of subresourceRange.each()) {\n      assert(this.params.dimension === '2d');\n\n      this.expectSingleColor(texture, this.params.format, {\n        size: [this.textureWidth, this.textureHeight, 1],\n        dimension: this.params.dimension,\n        slice,\n        layout: { mipLevel },\n        exp: this.stateToTexelComponents[state],\n      });\n    }\n  }\n\n  private checkContentsByTextureCopy(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    for (const { level, slice } of subresourceRange.each()) {\n      assert(this.params.dimension === '2d');\n\n      const width = this.textureWidth >> level;\n      const height = this.textureHeight >> level;\n\n      const dst = this.device.createTexture({\n        size: [width, height, 1],\n        format: this.params.format,\n        usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC,\n      });\n\n      const commandEncoder = this.device.createCommandEncoder();\n      commandEncoder.copyTextureToTexture(\n        { texture, mipLevel: level, arrayLayer: slice },\n        { texture: dst, mipLevel: 0, arrayLayer: 0 },\n        { width, height, depth: 1 }\n      );\n      this.queue.submit([commandEncoder.finish()]);\n\n      this.expectSingleColor(dst, this.params.format, {\n        size: [width, height, 1],\n        exp: this.stateToTexelComponents[state],\n      });\n    }\n  }\n\n  checkContents(\n    texture: GPUTexture,\n    state: InitializedState,\n    subresourceRange: SubresourceRange\n  ): void {\n    switch (this.params.readMethod) {\n      case ReadMethod.CopyToBuffer:\n        this.checkContentsByBufferCopy(texture, state, subresourceRange);\n        break;\n\n      case ReadMethod.CopyToTexture:\n        this.checkContentsByTextureCopy(texture, state, subresourceRange);\n        break;\n\n      default:\n        unreachable();\n    }\n  }\n}\n\nexport const g = makeTestGroup(CopiedTextureClearTest);\n\ng.test('uninitialized_texture_is_zero')\n  .params(TextureZeroInitTest.generateParams([ReadMethod.CopyToBuffer, ReadMethod.CopyToTexture]))\n  .fn(t => {\n    t.run();\n  });\n"],"file":"copied_texture_clear.spec.js"}